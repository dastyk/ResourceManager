
#ifndef _OBJ_PARSER_H_
#define _OBJ_PARSER_H_

#include <vector>

#include "scanner.h"

// autogenerated by Bison, don't panic
// if your IDE can't resolve it - call make first
#include "parser.tab.h"
#include "ArfData.h"

namespace ObjParser {

/**
 * This class is the interface for our scanner/lexer. The end user
 * is expected to use this. It drives scanner/lexer, keeps
 * parsed AST and generally is a good place to store additional
 * context data. Both parser and lexer have access to it via internal 
 * references.
 * 
 * I know that the AST is a bit too strong word for a simple
 * vector with nodes, but this is only an example. Get off me.
 */


#define ALLOC_ALL 0
#define ALLOC_POSITION 1
#define ALLOC_TECCOORD 2
#define ALLOC_NORMAL 3
#define ALLOC_FACE 4
#define ALLOC_SUB_MESH 5
#define ALLOC_SHRINK_TO_FIT 6

#define GENERATE_ARF_FLAG_NONE 0
#define GENERATE_ARF_FLAG_SHRINK_TO_FIT 1

class Interpreter
{
public:
    Interpreter();
    
    /**
     * Run parser. Results are stored inside.
     * \returns 0 on success, 1 on failure
     */
    int parse(std::istream *is, ArfData::Data* data, ArfData::DataPointers* datap);
    
    /**
     * Clear AST
     */
    void clear();
    
	ArfData::Data* _data;
	ArfData::DataPointers* _datap;

	void Alloc(int flag);

	void AddPosition(const ArfData::Position& pos);
	void AddTexCoord(const ArfData::TexCoord& tex);
	void AddNormal(const ArfData::Normal& norm);
	void AddFace(const ArfData::Face& face);
	void AddSubMesh(const string& name);


    /**
     * Print AST
     */
    std::string str() const;
    
 
    /**
     * This is needed so that Scanner and Parser can call some
     * methods that we want to keep hidden from the end user.
     */
    friend class Parser;
    friend class Scanner;
    
private:
    // Used internally by Scanner YY_USER_ACTION to update location indicator
    void increaseLocation(unsigned int loc);
    
    // Used to get last Scanner location. Used in error messages.
    unsigned int location() const;
    
private:
    Scanner _scanner;
    Parser _parser;
    unsigned int m_location;          // Used by scanner
};

}

#endif // INTERPRETER_H
